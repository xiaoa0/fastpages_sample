{
  
    
        "post0": {
            "title": "Psychology and the Good Life notes",
            "content": "Student mental health . Students are very privileged to be at Yale | They still feel very stressed | Trying to best each other at grinding | Many students feel stressed, lonely, helpless, or overwhelmed | . Prof Santos&#39;s approach . College is supposed to be good for students | Positive psychology studies happy people and figures out how/why they are happy | Behavioral/neuroscience is how we change and form new habits | Practice vs theory | Made a course plan that was very well-received, attracted lots of student interest | . Takeaways . 1: You can change your situation. You are not stuck in a cycle | 50% of influences of happiness are stored in genes, other 50% is behavior | You can&#39;t overhaul big factors like location, and they aren&#39;t even that significant in terms of affecting happiness (losing legs) | . Hacks . One thing this talk reminded me of is the importance of hindsight and perspective. Everyone struggles with day-to-day problems in their life, but each person&#39;s problems can be very different. I remember feeling a lot of stress when I first started middle school due to the new class structure, letter grades, and advanced math classes. Now, having taken multiple AP courses, my worries back then seemed very silly. Focusing on the negative in those moments didn&#39;t help me then, and they didn&#39;t help me now. So to &quot;hack&quot; my mindset in high school I&#39;m going to try noting at least 2 good things that happen each week here. . Record .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2022/09/11/psychnotes.html",
            "relUrl": "/jupyter/2022/09/11/psychnotes.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Code.org learnings",
            "content": "Java is case-sensitive | Create an object (instance of a class) with &#39;ClassName newObject = new ClassName();&#39; format | Can invoke methods on objects with &#39;objectName.methodName();&#39; format | Methods are like functions/algorithms, you can store them in separate files and then call them in main file | When doing so remember to extend the class | if/while loop parameter format is &#39;if/when (objectName.condition())&#39; | Pay attention to indentation and formatting. Organization is key not only for compiling but also for human readability | . import org.code.neighborhood.Painter; public class MyNeighborhood { public static void main(String[] args) { // constructing an instance (object) Painter myPainter = new Painter(); // how to use a method with an object myPainter.move(); myPainter.takePaint(); myPainter.turnLeft(); myPainter.turnLeft(); myPainter.turnLeft(); myPainter.move(); } } . import org.code.neighborhood.Painter; // separate methods in PainterPlus file public class PainterPlus extends Painter { public PainterPlus() { super(); } // turnRight is actually rotating left 3 times public void turnRight() { turnLeft(); turnLeft(); turnLeft(); } // using if and while loops, parameter format is &#39;objectName.givenCondition()&#39; public void takeAllPaint() { if (myPainterPlus.isOnBucket()) { while (myPainterplus.isOnBucket()) { takePaint(); } } } // mind indentation/formatting for code in method public void paintLine(String color) { while (myPainterPlus.canMoveForward()) { paintColor(); myPainterPlus.moveForward(); } } } .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2022/09/05/oopcodelearnings.html",
            "relUrl": "/jupyter/2022/09/05/oopcodelearnings.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Java Terminal",
            "content": "Calculator menu . This is a function I wrote using the Scanner and Math libraries that allows for the user to choose between multiple mathematical operations. . import java.util.Scanner; // scanner for input, Math for more complex operations import java.lang.Math; public class Menu { public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using scanner object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;is not a valid input, please try again&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose a math operation&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Add&quot;); System.out.println(&quot;2 - Subtract&quot;); System.out.println(&quot;3 - Multiply&quot;); System.out.println(&quot;4 - Divide&quot;); System.out.println(&quot;5 - Square Root&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection // i forgot to put curly brackets for each case which is why all the scanner variable names are different case 0: System.out.print(&quot;Bye!&quot;); quit = true; break; case 1: //addition Scanner add = new Scanner(System.in); System.out.println(&quot;Enter first number:&quot;); double firstNumber = add.nextDouble(); System.out.println(&quot;Enter second number: &quot;); double secondNumber = add.nextDouble(); double result = firstNumber + secondNumber; // Output input by user System.out.println(firstNumber + &quot; + &quot; + secondNumber + &quot; = &quot; + result); break; case 2: // subtraction Scanner subtract = new Scanner(System.in); System.out.println(&quot;Enter first number:&quot;); double first = subtract.nextDouble(); System.out.println(&quot;Enter second number: &quot;); double second = subtract.nextDouble(); double and = first - second; // Output input by user System.out.println(first + &quot; - &quot; + second + &quot; = &quot; + and); break; case 3: // multiplication Scanner multiply = new Scanner(System.in); System.out.println(&quot;Enter first number:&quot;); double a = multiply.nextDouble(); System.out.println(&quot;Enter second number: &quot;); double b = multiply.nextDouble(); double c = a * b; // Output input by user System.out.println(a + &quot; * &quot; + b + &quot; = &quot; + c); break; case 4: //division Scanner divide = new Scanner(System.in); System.out.println(&quot;Enter first number:&quot;); double x = divide.nextDouble(); System.out.println(&quot;Enter second number: &quot;); double y = divide.nextDouble(); double z = x / y; // Output input by user System.out.println(x + &quot; / &quot; + y + &quot; = &quot; + z); break; case 5: //square root Scanner root = new Scanner(System.in); System.out.println(&quot;Enter a number:&quot;); double aaa = root.nextDouble(); double square = Math.sqrt(aaa); // Output input by user System.out.println(&quot;The square root of &quot; + aaa + &quot; is &quot; + square); break; default: // if input is outside of range //Prints error message from console System.out.print(&quot;Please enter a valid input&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } public static void main(String args[]) { System.out.println(&quot;hello&quot;); new Menu(); // starting Menu object } } Menu.main(null); // calling function . hello - Choose a math operation - 1 - Add 2 - Subtract 3 - Multiply 4 - Divide 5 - Square Root 0 - Quit - 2: Enter first number: Enter second number: 0.0 - 1.0 = -1.0 5: Enter a number: The square root of 2.25 is 1.5 0: Bye! .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2022/09/02/javaterminal.html",
            "relUrl": "/jupyter/2022/09/02/javaterminal.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Organizing notes by subject",
            "content": "I will collect all of my College Board notes in a table in an index-style markdown page. In addition, I will tag my notes with &quot;PBL&quot; or &quot;College Board&quot; along with jupyter so that I can easily filter them from the homepage. .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2022/08/29/notesplanning.html",
            "relUrl": "/jupyter/2022/08/29/notesplanning.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Test md images",
            "content": ".",
            "url": "https://xiaoa0.github.io/fastpages_test/markdown/2022/08/29/imagepost.html",
            "relUrl": "/markdown/2022/08/29/imagepost.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Bash prereqs",
            "content": "jupyter kernelspec list java --version javac --version conda --version conda list conda list | grep jupyter . | jupyter kernelspec list &#39;;&#39; expected .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2022/08/28/bashcheck.html",
            "relUrl": "/jupyter/2022/08/28/bashcheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 1 Hacks",
            "content": "Terminal for testing and runtime | Run button &gt; JavaC &gt; Bytecode &gt; Java runs | Lots of data types | Primitives (booleans, characters) are fixed (defined by the language) | Non-primitives (wrapper classes) store functions (methods) and objects | Examples: wrappers are uppercase, primitives are lowercase | . . Code.org learnings . Format is myObject.function(); | Classes must be capitalized | Create new instance with ClassName objectName = new ClassName(); | . public class DefinePrimitives { public static void main(String[] args) { int anInt = 100; double aDouble = 89.9; boolean aBoolean = true; // not primitives but essential String aString = &quot;Hello, World!&quot;; // wrapper class shortcut assignment String aStringFormal = new String(&quot;Greetings, World!&quot;); System.out.println(&quot;anInt: &quot; + anInt); System.out.println(&quot;aDouble: &quot; + aDouble); System.out.println(&quot;aBoolean: &quot; + aBoolean); System.out.println(&quot;aString: &quot; + aString); System.out.println(&quot;aStringFormal: &quot; + aStringFormal); } } DefinePrimitives.main(null) . anInt: 100 aDouble: 89.9 aBoolean: true aString: Hello, World! aStringFormal: Greetings, World! . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: Not an integer (form like 159), java.util.InputMismatchException Enter a double: 22.2 Enter a boolean: false Enter a String: Hello World . Calculator function . This is a simple function that uses the Scanner class to take user input. It uses double and char primitives to store them and the calculation result. . import java.util.Scanner; // uses scanner to take input public class Calculator{ public static void main(String[] args) { //setting variables char operator; Double number1, number2, result; // create an object of Scanner class Scanner input = new Scanner(System.in); // taking user input System.out.println(&quot;Choose an operator: +, -, *, or /&quot;); operator = input.next().charAt(0); System.out.println(&quot;Enter first number&quot;); number1 = input.nextDouble(); System.out.println(&quot;Enter second number&quot;); number2 = input.nextDouble(); switch (operator) { // addition case &#39;+&#39;: result = number1 + number2; System.out.println(number1 + &quot; + &quot; + number2 + &quot; = &quot; + result); break; // subtraction case &#39;-&#39;: result = number1 - number2; System.out.println(number1 + &quot; - &quot; + number2 + &quot; = &quot; + result); break; // multiplication case &#39;*&#39;: result = number1 * number2; System.out.println(number1 + &quot; * &quot; + number2 + &quot; = &quot; + result); break; // division case &#39;/&#39;: result = number1 / number2; System.out.println(number1 + &quot; / &quot; + number2 + &quot; = &quot; + result); break; // error handling default: System.out.println(&quot;Invalid operator!&quot;); break; } input.close(); } } // calling function Calculator.main(null); . Choose an operator: +, -, *, or / Enter first number Enter second number 25.0 / 3.0 = 8.333333333333334 .",
            "url": "https://xiaoa0.github.io/fastpages_test/collegeboard/2022/08/23/week1hacks.html",
            "relUrl": "/collegeboard/2022/08/23/week1hacks.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 0 Hacks",
            "content": "// Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Jupyter notebooks can run code with the right kernel | Can use notebooks to do FRQs ### Java basics | Everything is a class | Methods have a specific signature | Can use methods w/same name is they have different signatures (# of parameters) | Static = single instance | OBJECTS | . Week 0 review ticket .",
            "url": "https://xiaoa0.github.io/fastpages_test/collegeboard/2022/08/19/week0hacks.html",
            "relUrl": "/collegeboard/2022/08/19/week0hacks.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python hello page",
            "content": "print(&quot;Hello, world!&quot;) . Hello, world! .",
            "url": "https://xiaoa0.github.io/fastpages_test/2022/07/28/pythonhello.html",
            "relUrl": "/2022/07/28/pythonhello.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java hello page",
            "content": "// Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! .",
            "url": "https://xiaoa0.github.io/fastpages_test/2022/07/21/javahello.html",
            "relUrl": "/2022/07/21/javahello.html",
            "date": " • Jul 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://xiaoa0.github.io/fastpages_test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://xiaoa0.github.io/fastpages_test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://xiaoa0.github.io/fastpages_test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "CB notes",
          "content": "Week Subject Notes . 1 | Primitives | Java notes + function | . 0 | Setup | Anatomy of Java | .",
          "url": "https://xiaoa0.github.io/fastpages_test/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "",
          "content": "Hello! . This is an html page running with fastpages. .",
          "url": "https://xiaoa0.github.io/fastpages_test/hello.html",
          "relUrl": "/hello.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xiaoa0.github.io/fastpages_test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}